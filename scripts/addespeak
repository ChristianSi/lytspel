#!/usr/bin/perl -CA
# Add RP and (if different) GA pronunciations generated by espeak to the dictionary.
#
# Copyright (c) 2016 Christian Siefkes
# See accompanying LICENSE file for licensing information.
#
# Required modules: Const::Fast and those listed in PhonEng.pm.

use 5.014;
use open qw(:std :utf8);  # use UTF-8 for all I/O (by default)
use utf8;                 # allow UTF-8 in source code
use warnings;

use File::Basename 'dirname';
use Const::Fast;
use Cwd 'abs_path';

use lib dirname(abs_path $0);  # to locate the PhonEng package
use PhonEng;

const my $IN_FILE  => 'phonetic-dict.txt';
const my $OUT_FILE => 'phoneng-espeak-dict.csv';

my $CSV = new_csv_out;

# read_dict: Reads the original phonetic dict into a hash. Returns a mapping
# from words (e.g. 'yeld', 'hectometre', 'detail') to the corresponding raw
# values (e.g. ': ye°ld', ':> hectometer', '/n: di°täl; v: ditä°l').
sub read_dict {
    open my $file, '<', $IN_FILE or die "Unable to open $IN_FILE: $!";
    my %dict;

    while (my $line = <$file>) {
        $line =~ m{^(['\w]+)([:/].*)$} or die "Invalid line: $line";
        my $word = $1;
        my $value = $2;
        # Only add words with two or more letters as well as 'a'
        $dict{$word} = $value if length $word > 1 || $word eq 'a';
    }

    close $file;
    return \%dict;
}

# redirect_target $value: Resolves the redirect if $value is a redirect.
# Returns undef otherwise.
sub redirect_target {
    my ($value) = @_;
    return $value =~ /^:>\s+(.*)$/ ? $1 : undef;
}

sub open_outfile_and_write_header {
    rename_to_backup_file_if_exists $OUT_FILE;
    open my $outfh, '>', $OUT_FILE or die "Unable to open $OUT_FILE for writing: $!";
    $CSV->print($outfh, [qw(Traditional POS Redirect RP GA Phoneng)]);
    return $outfh;
}

# write_entries_for_word $outfh, $word, $dict: Writes CSV entries for a word, adding its
# espeak-generated pronounciation. If the pronunciation of the word depends on its POS tag, several
# CSV entries will be written, otherwise just one.
sub write_entries_for_word {
    my ($outfh, $word, $dict, $candidate_parts) = @_;
    my $value = $dict->{$word};
    my $redirect_target = redirect_target $value;
    my $rp = '';
    my $ga = '';

    if (defined $redirect_target) {
        # Redirect
        $CSV->print($outfh, [$word, '', "$redirect_target"]);
    } else {
        if ($value =~ /^:\s+(.*)$/) {
            # Simple entry
            # TODO add espeak pron, calling via IPC::Open2: open2
            # (see http://docstore.mik.ua/orelly/perl/prog/ch07_039.htm)
            $CSV->print($outfh, [$word, '', '', $rp, $ga, $1]);
        } elsif ($value =~ m{^/(.*)$}) {
            # Tagged entries
            for my $tagged_pron (split /;\s*/, $1) {
                if ($tagged_pron =~ /^(.*):\s*(.*)$/) {
                    # TODO add espeak pron, dealing with POS tags: aj, av, n, prp, v
                    # TODO sample verb: have, say; noun: time, year; adjective: good, new
                    $CSV->print($outfh, [$word, $1, '', $rp, $ga, $2]);
                } else {
                    die "Invalid line: $word$value";
                }
            }
        } else {
            die "Invalid line: $word$value";
        }

    }
}

# Main block
my $dict = read_dict;
my $outfh = open_outfile_and_write_header;
write_entries_for_word $outfh, $_, $dict for sort { lc $a cmp lc $b } keys %$dict;
close $outfh;
