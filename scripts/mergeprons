#!/usr/bin/perl -CA
# Unify espeak and phoneng transcriptions, converting both into SAMPA alphabet.
#
# Copyright (c) 2016-18 Christian Siefkes
# See accompanying LICENSE.txt file for licensing information.
#
# Required modules: Const::Fast and those listed in PhonEng.pm.

use 5.014;
use open qw(:std :utf8);  # use UTF-8 for all I/O (by default)
use utf8;                 # allow UTF-8 in source code
use warnings;

use Const::Fast;
use Cwd 'abs_path';
use File::Basename 'dirname';
use List::Util qw(min max);

use lib dirname(abs_path $0);  # to locate the PhonEng package
use PhonEng;

const my $IN_FILE     => 'phoneng-espeak-dict.csv';
const my $OUT_FILE    => 'phonetic-dict.csv';
const my $PHONEME_MAP => 'phoneme-map.csv';

my $CSV_IN  = new_csv_in;
my $CSV_OUT = new_csv_out;

# build_mappings: Create and return three mappings from IPA-UK / IPA-US / Phoneng to SAMPA.
# Also return the length of the longest key in any of the maps.
sub build_mappings {
    my (%rp_map, %ga_map, %phoneng_map);
    my $maxkeylen  = 0;
    my $combi_mode = 0;
    open my $fh, '<', $PHONEME_MAP or die "Unable to open $PHONEME_MAP: $!\n";
    my $colref = $CSV_IN->getline($fh);  # Skip header line

    while ($colref = $CSV_IN->getline($fh)) {
        my $sampa = $colref->[0];
        next unless $sampa;              # Skip empty lines

        if ($sampa eq '#') {
            # '#' marks the beginning of sound combinations where only explicitly listed values
            # should be added
            $combi_mode = 1;
            next;
        }

        my $rp      = $colref->[1];
        my $ga      = $colref->[2];
        my $phoneng = $colref->[3];
        $maxkeylen = max $maxkeylen, length($rp), length($ga), length($phoneng);

        unless ($combi_mode) {
            # Empty fields indicate that the latest explictly set value should be used instead
            $rp      ||= $sampa;
            $ga      ||= $rp;
            $phoneng ||= $ga;
        }

        $sampa       = ''     if $sampa eq '-';  # '-' is used for tokens that should be ignored
        $rp_map{$rp} = $sampa if valid_key $rp;
        $ga_map{$ga} = $sampa if valid_key $ga;
        $phoneng_map{$phoneng} = $sampa if valid_key $phoneng;
    }

    close $fh;
    return \%rp_map, \%ga_map, \%phoneng_map, $maxkeylen;
}

# add_stressed_r_colored_vowels $phoneng_map: PhonEng has stress markers in the middle of
# r-colored vowels, e.g. /é°r/. This function adds mappings to convert them, returning an
# extended hashmap reference.
sub add_stressed_r_colored_vowels {
    my $phoneng_map = shift;
    my %result;

    for my $key (keys %$phoneng_map) {
        my $val = $phoneng_map->{$key};
        $result{$key} = $val;

        if ($key =~ /.r$/) {  # Add stressed variant
            my $stressed_key = substr($key, 0, -1) . '°r';
            $result{$stressed_key} = "'$val";
        }
    }

    return \%result;
}

# convert_pron $pron, $mapref, $maxkeylen, $alphabet_name: Convert a pronunciation using a given
# mapping alphabet (dictionary reference).
# $maxkeylen is the maximumg length of keys that may occur in $mapref.
# $alphabet_name is the name of alphabet used for conversion, e.g. 'PhonEng' or 'GA'.
sub convert_pron {
    my ($pron, $mapref, $maxkeylen, $alphabet_name) = @_;
    return '' unless $pron;  # Empty input

    # Eliminate duplicate consonant sounds from PhonEng
    $pron =~ s/([bdfghjklmnprstvwyzćðńśþẃź])\1/$1/g if $alphabet_name eq 'PhonEng';

    my $unconverted = $pron;
    my $converted   = '';

OUTER: while ($unconverted) {
        my $charcount = min $maxkeylen, length $unconverted;

    INNER: while ($charcount) {
            my $start = substr $unconverted, 0, $charcount;
            my $rest  = substr $unconverted, $charcount;
            my $val   = $mapref->{$start};

            if (defined $val) {  # Match found

                # In PhonEng, move stress marker in front of stressed vowel
                if ($alphabet_name eq 'PhonEng' && substr($rest, 0, 1) eq '°') {
                    $converted .= "'";
                    $rest = substr $rest, 1;
                }

                $converted .= $val;
                $unconverted = $rest;

                # Occasionally espeak inserts spaces or combining diacritical marks that can be
                # ignored
                $unconverted =~ s/^[ \p{InCombining_Diacritical_Marks}]+//s;
                next OUTER;
            }

            $charcount--;
        }

        die "No match found for converting /$pron/ from $alphabet_name, unconverted part: "
            . "/$unconverted/\n";
    }

    return $converted;
}

# convert_dict: Unify espeak and phoneng transcriptions in the dictionary, converting both
# into SAMPA alphabet.
sub convert_dict {
    my ($rp_map, $ga_map, $phoneng_map, $maxkeylen) = build_mappings;
    $phoneng_map = add_stressed_r_colored_vowels $phoneng_map;
    open my $infh, '<', $IN_FILE or die "Unable to open $IN_FILE: $!\n";
    my $colref = $CSV_IN->getline($infh);                 # Skip header line
    my $outfh  = open_outfile_and_write_header $OUT_FILE,
        [qw(Traditional POS Redirect RP GA PhonEng)];

    while ($colref = $CSV_IN->getline($infh)) {
        if (scalar @$colref < 4) {
            # Nothing to convert, just output line as is
            $CSV_OUT->print($outfh, $colref);
            next;
        }

        my $converted_phoneng = convert_pron $colref->[3], $phoneng_map, $maxkeylen, 'PhonEng';
        my $converted_rp      = convert_pron $colref->[4], $rp_map,      $maxkeylen, 'RP';
        my $converted_ga      = convert_pron $colref->[5], $ga_map,      $maxkeylen, 'GA';

        # Omit GA if identical to RP
        $converted_ga = '' if $converted_ga eq $converted_rp;
        # Omit PhonEng if identical to RP or GA
        $converted_phoneng = ''
            if $converted_phoneng eq $converted_rp || $converted_phoneng eq $converted_ga;

        $CSV_OUT->print($outfh,
            [@$colref[0 .. 2], $converted_rp, $converted_ga, $converted_phoneng]);
    }

    close $infh;
    close $outfh;
}

# Main block
convert_dict;
